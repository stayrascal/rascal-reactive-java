ext {
    projectName = rootProject.name
    projectVersion = project.version
    buildNumber = System.getenv("BUILD_NUMBER") ?: "lcoal"
    jobName = System.getenv("JOB_NAME") ?: name
    buildUrl = System.getenv("BUILD_URL") ?: "http://local-build"
    revision = System.getenv("GIT_COMMIT") ?: "local"
    timestamp = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    buildDir = relativePath("./build")

}

project.group = 'com.stayrascal.aws'
project.version = buildNumber

buildscript {
    ext {
        springbootVersion = '1.5.2.RELEASE'
        /*springbootVersion = '2.0.0.BUILD-SNAPSHOT'*/
    }
    repositories {
        jcenter()
        mavenLocal()
        maven { url 'http://repo.spring.io/snapshot' }
        maven { url 'http://repo.spring.io/milestone' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}"
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.3'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property 'sonar.host.url', 'https:sonar.com'
        property 'sonar.jacoco.reportPaths', "${buildDir}/jacoco/test.exec, ${buildDir}/jacoco/integrationTest.exec"
        properties 'sonar.login', 'token'
    }
}

repositories {
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/unit/java']
        resources.srcDirs = ['src/test/unit/resources']
    }
    integrationTest {
        java.srcDirs = ['src/test/intg/java']
        resources.srcDirs = ['src/test/intg/resources']
        /*resources.srcDirs = ['src/test/intg/resources', 'config/application/environment/local']
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output*/
    }
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    include: ['com.stayrascal.services.domain.model.github/*'])
        })
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
//    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-actuator")
    /*compile("org.springframework.security:spring-security-ladp")*/
    compile("org.springframework.cloud:spring-cloud-starter-hystrix")
    compile("org.springframework.boot:spring-boot-configuration-processor")
    /*compile("org.springframework.hateoas:spring-hateos")*/
    compile("io.reactivex:rxjava:1.2.5")
//    compile("commons-logging:commons-logging:1.2")
    compile("org.jadira.usertype:usertype.extended:5.0.0.GA")
    compile("com.google.guava:guava:21.0")
    compile("joda-time:joda-time:2.9.7")
    compile("by.stub:stubby4j:3.3.0")
    compile("com.github.dreamhead:moco-core:0.11.0")
    runtime('com.h2database:h2')
    testCompile("org.springframework.boot:spring-boot-starter-test")
    integrationTestCompile sourceSets.main.output
    integrationTestCompile sourceSets.test.output
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.testRuntime
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.SR5'
    }
}

idea {
    project {
        ipr {
            withXml { XmlProvider xml ->
                xml.node.with {
                    component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
                }
            }
        }
    }

    module {
        testSourceDirs += sourceSets.integrationTest.java.srcDirs
    }
}

task unitTest(dependsOn: test)

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}
build.dependsOn integrationTest