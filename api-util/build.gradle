ext {
    buildLabel = System.getenv("CI_LABEL") ?: ("${System.getenv('USERNAME') ?: 'UNKNOWM'}-SNAPSHOT".toString())
    buildDate = new Date().format('dd-MM-yyyy HH:mm')
    apiName = 'api-util'
}

project.group = 'com.stayrascal.api'
project.version = buildVersion

buildscript {
    ext {
        springbootVersion = '1.5.2.RELEASE'
    }
    repositories {
        jcenter()
        mavenLocal()
        maven { url 'http://repo.spring.io/snapshot' }
        maven { url 'http://repo.spring.io/milestone' }
        maven { url 'https://plugins.gradle.org/m2/' }
//        maven { url 'http://localhost.nexus/'}
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}"
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'
apply plugin: 'project-structure'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/unit/java']
        resources.srcDirs = ['src/test/unit/resources']
    }
    integrationTest {
        java.srcDirs = ['src/test/intg/java']
        resources.srcDirs = ['src/test/intg/resources']
        /*resources.srcDirs = ['src/test/intg/resources', 'config/application/environment/local']
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output*/
    }
}

task unitTest(dependsOn: test)

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}
build.dependsOn integrationTest

configurations {
    provided
    provided.extendsFrom(ideaProvided)
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

afterEvaluate {
    idea {
        module {
            testSourceDirs = testSourceDirs + sourceSets.integrationTest.allSource.srcDirs.flatten() as LinkedHashSet
            outputDir = new File("${buildDir}/classes/idea/main")
            testOutputDir = new File("${buildDir}/classes/idea/test")
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        csv.enabled false
    }
}

/*jar {
    baseName = apiName
    processResources {
        filesMatching('**//*application.yml') {
            filter(ReplaceTokens, tokens: ['build.date': buildDate.toString(), 'build.number': buildLabel.toString()])
        }
    }
}*/

idea.module {
    testSourceDirs += sourceSets.integrationTest.java.srcDirs
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-actuator',
            'org.springframework.boot:spring-boot-starter-tomcat',
            'org.springframework.boot:spring-boot-starter-aop',
            'org.springframework.security:spring-security-ldap',
            'com.google.code.findbugs:jsr305:3.0.2'

    compile("io.springfox:springfox-swagger2:2.6.1"){
        exclude group: 'org.springframework'
    }

    compile 'joda-time:joda-time:2.9.7', optional
    compile 'org.springframework.cloud:spring-cloud-starter-hystrix', optional
    compile 'org.springframework.boot:spring-boot-configuration-processor', optional
    compile 'org.springframework.hateoas:spring-hateos', optional

    testCompile 'org.springframework.boot:spring-boot-starter-test',
                'org.springframework.security:spring-security-test'

    /*compile("org.springframework.ldap:spring-ldap-core")
//    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("io.reactivex:rxjava:1.2.5")
//    compile("commons-logging:commons-logging:1.2")
    compile("org.jadira.usertype:usertype.extended:5.0.0.GA")
    compile("com.google.guava:guava:21.0")
    compile("org.apache.commons:commons-lang3:3.5")
    compile("io.springfox:springfox-swagger-ui:2.6.1")
    compile("by.stub:stubby4j:3.3.0")
    compile("com.github.dreamhead:moco-core:0.11.0")
//    compile("org.flywaydb:flyway-gradle-plugin:4.1.2")
    runtime('com.h2database:h2')*/
    integrationTestCompile sourceSets.main.output
    integrationTestCompile sourceSets.test.output
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.testRuntime
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.SR5'
    }
}

/*applicationDefaultJvmArgs = [
        '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=6789'
]*/

/*
publishing {
    repositories {
        maven {
            org.gradle.api.credentials.Credentials {
                username 'username'
                password 'password'
            }
            url "http://localhost.nexus/content/repositories/${project.version.endsWith('-SNAPSHOT') ? '.snapshot' : ''}"
        }
    }
    publications {
        mavenJava(MavenPublication){
            artifactId apiName
            from components.java
        }
    }
}
*/

